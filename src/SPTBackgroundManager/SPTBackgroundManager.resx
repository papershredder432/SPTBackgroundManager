<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAQRAAAAAAIVJDcxITBFli08aedJWKz/U2LB/1Niwf9TYsH/U2LB/1Ni
        wf9TYsH/U2LB/1Niwf9TYsH/U2LB/1Niwv9SYar+xNHk/pmptvxrlGH9k8hy/5rRdv+e1Hn/nNN4/5bM
        df9nfFL/u3E8/wAAAAAAAAAAAAAAAAgVKQAAABMKM0NXa3+OoNxmc4j+Pkd9/1BevP9TYsH/U2LB/1Ni
        wf9TYsH/U2LB/1Niwf9TYsH/U2LB/1Niwf9TYsH/UmHB/1ppqP7P3Oz/h5em+2qBf/15kon+dZh0/4S0
        bP51nG/+bIt0/mJ7Xv6XaD//AAAAAAAAAAANHDAAAAATC0hYa4ejscL34e79/5Ogs/4+Rm39SVar/FNi
        wv9TYsH/U2LB/1Niwf9TYsH/U2LB/1Niwf9TYsH/U2LB/1Niwf9QX77/b36u/d3q+f/Y5fX/2uf5/93q
        /P+/zd7/i56j/rC+0P7AzeT/vsvd/56otv8UJjAAAwgvBR80PDlFVmWYsb/P9+Tx///l8v//r7zP/URM
        a/1CTIn9UF+9/1Niwf9TYsH/U2LB/1Niwf9TYsH/U2LB/1Niwf9TYsH/U2LC/05dt/2XpcX75PH//+Pw
        ///i7///4u///+Pw///j7/7/1eL2/7bD4v+3xOP/xND7/yU5Qo8yS0iVWHhg6KS0wP7j8P//4u///+Pw
        ///N2ur/U114/kJIbv9GUp7+UmHB/1Niwf9TYsH/U2LB/1Niwf9TYsH/U2LB/1Niwf9TYsL/VGOs+8LP
        4v3k8f//4/D//+Pw///j8P//4/D//+Pw///j8P//5PH//7XB6P+Gkub/Wn1a/lV4Vv2Amo/83er6/+Pw
        ///j8P//4u///+Hu/v+AjKH+QUdn/0JJdf9IVaj/U2LC/1Niwf9TYsH/U2LB/1Niwf9TYsH/U2LB/09e
        u/95iLT93uv6/+Lv///S3/7/uMT3/6y58P+8yfb/2uf//+Tx///f7Pz/nanf/4WQ6/+Qw3P/eqZo/pKl
        qvzk8P//2+j//9rm///f7P//5fL//8DN3v9OV3P/REpq/0FJev9IVqv/UmLB/1Niwf9TYsL/U2LB/1Ni
        wf9SYcL/VWSt/7rI3P/l8v//ytb+/5yo+v9fa6X+ZVZh/nBhb/5/haf9xtTr/9jl9/+JltT/dYHZ/4i+
        Yv+Rx3L/e5SO/rC79v+jrvz/oKz7/625/P/P2/7/4u/+/4+bsP9CSWn/Q0lp/z5Gc/5DT539TVu4/U1d
        t/9QX73/UmHB/01cs/+RoMP/4u/9/9vo//+ksPz/lJ/8/4CM3f9wX2r+u284/65rPf6GbmT9r7vJ/cjV
        +/+BjeP/qYY8/4u5Xv90n27+bHq8/pKd+f+Unvv/k577/6Cr+//T3///1+Tz/3mEm/5bZX/+dYGX/VNe
        fv1fbJb7j52+/nWEtf9fb6//fo22/9bk8v/l8///0t///5ml/f+UoP3/laH//3uH1v6EYFT91Ho6/698
        Ov9gfGH8lqW5/p6q5v/Tejz/m5RE/4OdWP9OU2r+ipbu/5Wg/P+Un/v/lJ/7/7jE/f/k8v//3er5/9Xj
        8//g7fz/0d7u/9fk8//n9P//3+z6/9Pg8P/e6/r/2OP0/8rP3f+3u9f/jo/R/42P1P+RmuX/jJfe/4N6
        iPrRgUr+rIc8/361Y/9ulWb/c5Z0/s54Pf+wejj/pnA0/3NfaPuKl/L/kZ36/4+b+P+NmfX/pK3t/8vR
        4f/HzNz/1eDz/+Lv///k8f//2uj4/668zP+/zN3+5PH//+n0///j0Lv/uoJJ/49jN/+PYTX/uYFI/9rA
        p//s7vL/9PPy//LZxv/OjFL/j55I/4/JbP+b03f/j10997tsNP/Fcjb/eV9f+ouX4/6osOb/rKzR/6OC
        e/+RbFP/mGxB/8KOVv/r4NT/6fX//83b6/+KhYf+dFhI/qGsu/7j8P//4+z2//DWtf+7jln/bkcZ/2tD
        Ff+bYyP/4bB3//38+P/+/vz//f37/7eWgP+majj/noo+/4SxWP9uTzzZt2o0/9V8PP+QZE78ucDa/v7/
        /f/x2bv/tHUu/3FGFf9tRBX/oGcm/9++lv+0wtH/h4CA/rVtO/+cZ0T+tsPR/sXT4v9banv/rbGz/9nI
        sv+BWCv/b0UW/6JoJv/nvY3////9//f39f+yuL3/NEJR/1tFO//EdDz/sYE6/3tUPPK5azP/4oNA/6dq
        Qf6jpqz+//////Tfxv+7jVj/dVEn/2tDFf+cZSf/i3RY/zc/S/6oaT7+1309/51kPv6FipX9w9Lj/oiX
        qf87SVr/U0xE/3lYMv+UZS//toRL/8vBs/+psLb/XGl2/y44R/9uTjv/w3U+/9l/P//VfD3/l2E8/Lxs
        M//HdTv/akw7/zxFUv6TnKT+4eLg//bv5P+9l2r/k2En/3VYN/8tOUb/Z0w+/c95PP/TfD3/vG42/6Jj
        OP6Bb2b9mKW9/pmoxf9dbYf/O0lc/zM8Rv8vOET/LzxM/ykyPv9HPDr/mWE8/855Pf/Yfj7/5IZC/9l/
        P/94gkP9r3Q1/8NvN/+8cT3/k146/zY0Of1CT1/+Z294/19WSv9FQ0H/PEtg/1hieP6fYzv+zXc6/9N8
        Pf/Fcjj/xXI3/8Z0Ov+EX0v8kpyx/LvJ5v+grs//W2V5/nNON/6MWzr/qWk8/8l3Pf/UfD3/03s9/9N7
        Pf/VfT7/03w9/2+fYvyJp1H/poM7/9F8PP/Uez3/qWQ0/3ZNMv9aRDn9Qkxa/oCRqv+Yp8n/fXiA/cRz
        O/7Tez3/0ns9/9B6PP/PeTz/03w9/855O/+VaEr7nqe0/dXk9/9/dHP8vm42/sRxNv/CcDX/w3E3/8Ry
        N//Ecjf/x3I4/9F5PP/Oejv/Z49h9prTeP+JwGT/ook+/9B6O//SeTz/xHE2/854O/+XZkX+goec/cva
        8f6QgHn9y3Y6/9J7Pf/Sez3/0ns9/9J7Pf/Sez3/0ns9/9N7Pf+Vak/9kZ+w/YVqWvvSejv/0ns9/9F6
        PP/PeTz/zng7/8d3Of+nfzn/m41A/42eSv9TdVfJl8x2/5vSeP+Hu2D/jJpG/6qFPP/Qez3/xXM4/8Fv
        Nf+baEf9m6Wz/I98cv3Ndzr/0ns9/9J7Pf/Sez3/0ns9/9J7Pf/Sez3/4oRB/92CQf9sV039g11F+9R8
        Pf/Tez3/0Ho7/816O//Nejv/ook9/4W9Yf+RzHH/l9F2/zNMSXODsm36otp8/6DXe/+V0nb/gqhQ/7hx
        NP/Fcjj/0ns9/895O/+FZVP+XFZX/sd2PP/UfD3/0ns9/9J7Pf/Sez3/0ns9/9J7Pf/VfT7/1n0+/65q
        Ov6dYjn+1Hw9/66FPf+QnUr/jqVP/4qmUP+KvGH/m9J4/53SeP+c0nj/DBk4Klt+W9Kr5oT/pd5//5zT
        ef+Drlb/t3k4/9N7Pf/Sez3/03w9/79yPP96Ujj9z3o+/+aHQ//VfT7/0ns9/9Z9Pv/Yfj//03s9/9J7
        Pf/Sez3/zHc6/8FwNv/Qejz/i5pG/5HQdP+b03n/mtN4/5zTef+c0nj/nNJ4/5zSeP9AOTy1KDtClnuo
        au6e1Xn/nNJ4/5LNcv+VlUX/0no8/9J7Pf/Sez3/1Hw9/71tNP/Gcjj/24BA/9J7Pf/Sez3/3oJB/+OF
        Qv/VfT7/0ns9/9J7Pf/Sez3/0Ho8/9N7Pf+5gTz/iaxU/5jQdf+c0nj/nNJ4/5zSeP+c0nj/nNJ4/4FX
        PfEYJTpDP1pNhoKwbP2e1Xn/jcdr/6WLQP/Tej3/1Ho9/9R6Pf/Tez3/yHQ5/7NnMf/Rej3/0ns9/9J7
        Pf/VfT7/1n0+/9J7Pf/Sez3/0ns9/9J7Pf/Sez3/03s9/8R9O/+HjTr/e7da/5zTef+c0nj/nNJ4/57U
        ef+f13v/rGo9/0U8PIUACDQSRGFRoX+waP6OoEr/yns7/816O/+thDz/rIU8/857PP/Sez3/tmky/8Ry
        N//TfD3/0ns9/9J7Pf/Sez3/0ns9/9J7Pf/Sez3/0ns9/9J7Pf/Uez3/tIE7/3qwVf+NyW3/nNJ4/5zS
        eP+c0nj/o9t9/7Dsh/+jZj38k1897jk3PFsFGzwXOU1BpJxrPPy8gDv/i5xH/4i/ZP+KwWb/m5BC/9B6
        PP/Ldjr/s2cx/8x3Ov/TfD3/0ns9/9J7Pf/Sez3/0ns9/9J7Pf/Sez3/0ns9/9J7Pf/Qezz/qYk//4q0
        W/+Xz3T/nNJ4/5zSeP+e1Hn/f61s/Eg+PJKkZj31kl497zw4PHoAFTshRTo7i2J5R/KQynL/ntR6/53T
        ef+Iv2T/pYg9/9N7Pf/Ecjf/sWYw/8h0Of/Sez3/yXU5/8x3O//Sez3/0ns9/9J7Pf/Sez3/0ns9/9J7
        Pf/Uej3/q4Q7/4vCZ/+d03n/ntR5/4KxbPs6VUykABM8CkxAPHiYYT3umWI9+lNDPKwPIjs5ITlEYVl8
        WtuMvnH/ntR5/5zTef+Gt13/qYQ7/9N7Pf/HdDn/smYw/7RoMf+1aDH/zXg7/9J7Pf/Sez3/0ns9/9J7
        Pf/Sez3/0ns9/9R7Pf+5gTz/ibxi/5zUef99qmr/P1xOqgkWNhgFGDwAAAA8BDg2PFJ2Uj3QnWQ9/31V
        PeNCOjyCDiI7U0BfUJ91oWfrlMh0/5vUeP+DsVf/un87/9R7Pf/PeTz/yXU5/855O//Sez3/0ns9/9J7
        Pf/TfD3/1Hw+/9J7Pf/Sez3/0ns9/9B8PP+ji0H/ZopS9jVPSpkJFjYaFCU8AAAAAAAACzwAAABAABAj
        PCJKPz2Nhlo95ZliPf55Uz3ZRjs7jiEyP4NDY1K/dKBn7IjBbv6bkkL/1Xs8/9N7Pf/TfD3/03w9/9N8
        Pf/TfD3/0ns9/9qAP//ihUL/03s9/9R8Pf/UfD3/unA9/3hSPN8tMTlrAAoyCQsXNgAAAAAAAAAAAAAA
        AAAAAAAAABI8AAAAPAMbKT0vVEM9jYJYPeKWYD3+i1s97XNPPMlLQz7NQ1dK8WRpQfyxbDz+xnQ6/8h0
        Of/Gczj/x3M4/8BvNv+6bTf/1X5A/96DQ//Idz3/rWo9/4NYPetMQDyaFSc8MAAAPQIAFD0AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANPAAAADwDFiY8J0E7PGxmSz22jFw94Z1jPfWUXjz9ilo9/pFd
        PP+vaDX/tWkz/65mM/+jYjb+eFA24lA/OKxcRzy5YUk8tlpGPKI2Njx+FCY8PAARPAYCGjwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsAA5lCAAAPPAsVJjwqOTc8XE5A
        PJFfSDyyZ0w9zmtOPdVwUD3SXEc9wEM8PYwjLj47AAhCBwAHPAsABjwKAAI7AwASRAAAADoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAAPAAAADgAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAeAAAAPwAAAH/AAAH/+AAP8=
</value>
  </data>
</root>